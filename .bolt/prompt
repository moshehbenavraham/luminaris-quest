# ────────────────────────────────────────────────────────────
#  Luminari’s Quest · Persistent Build Rules for Bolt.new
# ────────────────────────────────────────────────────────────
#  Purpose
#  • Prevent “run-away generator” behaviour by scoping every build.
#  • Encode project-wide tech stack, style guide, and contest limits.
#  • Loaded automatically; do NOT repeat these rules in individual prompts.
# ────────────────────────────────────────────────────────────

## 0. Stack Snapshot  (reference – do not override)
TECH_FRONTEND          = React 18 + TypeScript 5 (Vite)
STYLING                = Tailwind CSS (JIT)  +  Shadcn/UI components
BACKEND_API            = Supabase JS client (only calls, no schema edits)
AI_SERVICES            = OpenAI (narrative) · Leonardo.AI (visuals) · ElevenLabs (voice)
DEPLOY_TARGET          = Netlify
FILE_STRUCTURE_ROOT    = src/
  • src/pages/         = route entry points
  • src/components/    = atomic UI pieces
  • src/hooks/         = reusable logic
  • src/services/      = API wrappers & helpers
ENV_PLACEHOLDERS_FILE  = .env.example

## 1. Scope & Safety Rules  (highest priority)
1.  ONLY edit file(s) explicitly *Targeted* in the current Build run.
2.  NEVER create, rename, or delete files, routes, tests, styles, or data models
    unless the prompt says “add ___”.
3.  If the prompt violates Rule 1 or 2, raise a warning comment instead of acting.
4.  Keep every build **idempotent**—running twice must leave code unchanged.
5.  Do not reference or import libraries outside TECH_FRONTEND & STYLING stack.

## 2. Prompt Format Expectations
• The incoming prompt must follow the SPECS-E pattern  
  (State · Platform · Examples · Constraints · Success).:contentReference[oaicite:0]{index=0}
• If any SPECS-E section is missing or ambiguous, ask for clarification in *Discussion*
  mode—do NOT skip straight to code.:contentReference[oaicite:1]{index=1}

## 3. Coding Conventions
• TypeScript strict mode; no `any` unless explicitly allowed.  
• Tailwind classes only—no separate CSS/Sass files.  
• Use Shadcn/UI imports:  
    `import { Button } from "@/components/ui/button"` etc.  
• Keep imports sorted alphabetically; prefer absolute imports via `@/` alias if configured.  
• Provide TODO comments for future logic; avoid filler lorem ipsum.

## 4. Narrative & IP Constraints
• Respect established lore: protagonist **Luminari** journeys through **Lumina**,
  an RPG adventure aimed at healing trauma from parental loss & homelessness.  
• OGL/Pathfinder mechanics are allowed, but **never name “Pathfinder” in code or text**.:contentReference[oaicite:2]{index=2}  
• All generated text, variables, and comments must remain PG-13.

## 5. Environment & Secrets
• Read runtime secrets exclusively from `process.env.*`; never hard-code keys.  
• If a required env var is missing, leave a TODO and reference `.env.example`.  
• Do not alter `.env.example` unless the prompt specifies new placeholders.

## 6. Quality Gates
• Code **must compile** (`npm run build`) and **lint clean** (`npm run lint`).  
• No ESLint warnings are acceptable unless waived in the prompt.  
• CI workflow lives in `.github/workflows/ci.yml`; do not edit it unless asked.

## 7. Output Etiquette
• Respond with **code blocks only** when generating files. No extra commentary.  
• Prepend each generated file with `// GENERATED BY BOLT.NEW – DO NOT EDIT MANUALLY`
  unless the prompt overrides.  
• If an instruction conflicts with any rule above, defer to **Scope & Safety Rules** §1.

# ────────────────────────────────────────────────────────────
#  End of .bolt/prompt
# ────────────────────────────────────────────────────────────