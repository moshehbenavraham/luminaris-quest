# ────────────────────────────────────────────────────────────
#  Luminari's Quest · Persistent Build Rules for Bolt.new
# ────────────────────────────────────────────────────────────
#  Purpose
#  • Prevent "run-away generator" behaviour by scoping every build.
#  • Encode project-wide tech stack, style guide, and contest limits.
#  • Loaded automatically; do NOT repeat these rules in individual prompts.
# ────────────────────────────────────────────────────────────

## 0. Stack Snapshot  (reference – do not override)
TECH_FRONTEND          = React 18 + TypeScript 5 (Vite)
STYLING                = Tailwind CSS (JIT)  +  Shadcn/UI components
STATE_MANAGEMENT       = Zustand with persistence and hydration safety
BACKEND_API            = Supabase JS client (only calls, no schema edits)
AI_SERVICES            = OpenAI (narrative) · Leonardo.AI (visuals) · ElevenLabs (voice)
DEPLOY_TARGET          = Netlify
FILE_STRUCTURE_ROOT    = src/
  • src/pages/         = route entry points (Home, Adventure, Progress, Profile, Legal)
  • src/components/    = atomic UI pieces (including JournalEntryCard with CRUD)
  • src/hooks/         = reusable logic
  • src/services/      = API wrappers & helpers
  • src/store/         = Zustand state management
  • src/engine/        = game logic and scene engine
ENV_PLACEHOLDERS_FILE  = .env.example

## 1. Scope & Safety Rules  (highest priority)
1.  ONLY edit file(s) explicitly *Targeted* in the current Build run.
2.  NEVER create, rename, or delete files, routes, tests, styles, or data models
    unless the prompt says "add ___".
3.  If the prompt violates Rule 1 or 2, raise a warning comment instead of acting.
4.  Keep every build **idempotent** and **compilable**—running twice must leave code unchanged AND building successfully.
5.  **Verify before claiming**: If you say you added an import, the import must actually be in the code.
6.  **No circular imports**: Never create re-export files that import from what they're trying to export.
7.  Do not reference or import libraries outside TECH_FRONTEND & STYLING stack.
8.  Never modify configuration files (vite.config.ts, tsconfig.*.json, etc.) unless prompted.
9.  Never modify environment files (.env, .env.*) or documentation unless explicitly requested.

## 1.5. Build Safety & Error Prevention (CRITICAL - MUST FOLLOW)
1.  **NEVER create circular imports**:
    - Do NOT create re-export files like `src/components/ui/use-toast.ts`
    - Import hooks directly from `@/hooks/` not from UI components
    - If you see an import like `import X from "@/components/ui/use-X"` for hooks, FLAG IT as circular
2.  **Import Validation**:
    - ALWAYS verify imports exist before using them
    - Never import `resetGame` without adding it to destructuring: `const { completeScene, resetGame } = useGameStore()`
    - Never import `milestones` without adding it to destructuring
    - Before using any variable, ensure it's properly imported and destructured
3.  **State Management Rules**:
    - Zustand store changes require updating BOTH interface AND destructuring
    - When adding store actions, update ALL components that need them
    - NEVER claim to have made changes without actually implementing them
    - Store updates must update interface, implementation, AND all consuming components
4.  **TypeScript Compilation**:
    - Every change must be TypeScript valid
    - Undefined variables are BUILD FAILURES - fix imports first
    - Missing dependencies in useEffect arrays are warnings - include them
    - Changes must be syntactically valid TypeScript
5.  **Test Before Claiming Success**:
    - If you say "X is now working", the code must actually implement X
    - Don't claim imports are added if they're not in the destructuring
    - Verify function calls match available store actions
    - No phantom changes - every claimed change must exist in the actual code

## 2. Component Design Principles (Atomic Design)
• Follow atomic design principles for all components:
  - Atoms: Basic UI elements (Button, Input, Card)  
  - Molecules: Composite components (AuthForm, NavItem, JournalEntryCard)  
  - Organisms: Complex components (Layout, Sidebar, Adventure, Progress)
• All components must:
  - Use TypeScript with strict mode; no `any` unless explicitly allowed
  - Be under 500 lines (split into subcomponents if needed)
  - Use Tailwind CSS for styling only—no separate CSS/Sass files
  - Use Shadcn/UI components as base: `import { Button } from "@/components/ui/button"`
  - Use Lucide icons for navigation/actions
  - Include proper accessibility attributes (ARIA, keyboard nav, screen reader support)
• File naming:
  - React components: PascalCase (e.g., AuthForm.tsx, JournalEntryCard.tsx)
  - Utilities/hooks: camelCase (e.g., useAuth.ts)
  - Test files: *.test.tsx

## 3. Project Roadmap & Task Tracking
• Component architecture has been refactored:
  - ✅ Page components extracted to src/pages/
  - ✅ Journal system enhanced with full CRUD operations
  - ✅ TypeScript compilation errors resolved
  - ✅ Code quality improvements with ESLint and Prettier
• Follow component priority in docs/COMPONENT_MAP.md for new features
• Track current focus through GitHub Issues/PRs and CHANGELOG.md

## 4. Prompt Format Expectations
• The incoming prompt must follow the SPECS-E pattern  
  (State · Platform · Examples · Constraints · Success).
• If any SPECS-E section is missing or ambiguous, ask for clarification in *Discussion*
  mode—do NOT skip straight to code.

## 5. Coding Conventions
• TypeScript strict mode; no `any` unless explicitly allowed.  
• Tailwind classes only—no separate CSS/Sass files.  
• Use Shadcn/UI imports: `import { Button } from "@/components/ui/button"` etc.  
• Keep imports sorted alphabetically; prefer absolute imports via `@/` alias if configured.
• **Import Safety**: Before using any variable, ensure it's properly imported and destructured.
• **Store Updates**: When modifying Zustand store, update interface, implementation, AND all consuming components.
• **No Phantom Changes**: Never claim to have made a change without actually implementing it in code.
• **Build Verification**: Changes must be syntactically valid TypeScript.
• Provide TODO comments for future logic; avoid filler lorem ipsum.
• Add JSDoc comments for all components and functions.
• Write tests for new features using Vitest.

## 6. Environment & API Requirements
• Required environment variables (reference .env.example):
  - VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY
  - VITE_OPENAI_API_KEY, VITE_LEONARDO_API_KEY, VITE_ELEVENLABS_API_KEY (planned)
• Read runtime secrets exclusively from `process.env.*`; never hard-code keys.  
• If a required env var is missing, leave a TODO and reference `.env.example`.  
• Do not alter `.env.example` unless the prompt specifies new placeholders.
• Use proper error handling for missing env vars.

## 7. Narrative & IP Constraints
• Respect established lore: protagonist **Luminari** journeys through **Lumina**,
  an RPG adventure aimed at healing trauma from parental loss & homelessness.  
• Game content must follow OGL/ORC licensing; never use third-party RPG IP or "Product Identity".
• OGL/Pathfinder mechanics are allowed, but **never name "Pathfinder" in code or text**.  
• All generated text, variables, and comments must remain PG-13.
• Maintain "Built with Bolt.new" attribution in Footer.
• Update licenses/third-party.md when adding new dependencies.

## 8. Quality Gates & Error Handling
• Code **must compile** (`npm run build`) and **lint clean** (`npm run lint`).  
• No ESLint warnings are acceptable unless waived in the prompt.  
• CI workflow lives in `.github/workflows/ci.yml`; do not edit it unless asked.
• Use ErrorBoundary for React errors; implement proper loading states.
• Handle API errors gracefully; validate environment variables.
• Test in production mode before deploying; monitor for blank screens.
• **Deployment Safety**: Every change must be verified to not break builds.
• **Import Verification**: All imports must resolve to existing files/exports.

## 9. Documentation & Commit Standards
• Keep core documentation files updated: README.md, CONTRIBUTING.md, CHANGELOG.md, docs/COMPONENT_MAP.md.
• Write conventional commit messages: feat/fix/docs/style/refactor/test/chore.
• Stage only files related to current task; keep commits atomic and focused.

### 9.1 Document Library
While this project is primarily built using the 'Bolt.new' platform, it also integrates multiple other development platforms and tools. For documentation and comprehensive development guidelines:

- **README.md**
- **Cursor IDE Integration:** .cursorignore for files that Cursor should not include in context.
  Reference `.cursor/` for Cursor IDE component and layout guidelines
    - *Note not a document, but part of Cursor config for background agents: environment.json
    - `.cursor/rules/`
      - layout-integration.mdc
      - project-context.mdc
      - sidebar-navigation.mdc
- **Claude Code - Agentic AI Coder:** See `CLAUDE.md` for Claude Code's guidance
  `.claude/settings.local.json` - Settings for Claude Code
- **Roo Code Orchestration Modes:** `.roomodes` defines per-project AI task orchestration settings for Roo Code and Cursor. It enables custom multi-agent workflows (e.g., Boomerang Mode) to be scoped and run only within this project.
- **Component Roadmap:** Check `docs/COMPONENT_MAP.md` for build priorities and component relationships
- **Change Log:** CHANGELOG.md - document all notable changes to Luminari's Quest
- **Contributing Guidelines:** See `CONTRIBUTING.md` for code quality, testing, and commit standards
- **Legal Compliance:** Reference `LICENSE` and `licenses/` directory for OGL/ORC licensing requirements
- **Configuration Standards:** Follow `eslint.config.js`, `.prettierrc`, and `tsconfig.*.json` for code quality
- **[Environment Architecture](docs/ENVIRONMENT_ARCHITECTURE.md)** - Multi-environment setup and deployment strategy
- **OTHER Documentation:**:
  - CODE_OF_CONDUCT.md
  - FAQ.md

## 10. Output Etiquette
• Respond with **code blocks only** when generating files. No extra commentary.  
• Prepend each generated file with `// GENERATED BY BOLT.NEW – DO NOT EDIT MANUALLY`
  unless the prompt overrides.  
• If an instruction conflicts with any rule above, defer to **Scope & Safety Rules** §1 and **Build Safety** §1.5.
• **Truth in Reporting**: Only claim changes that are actually implemented in the code.

## 11. Cross-Platform Integration
• Cursor IDE rules: See .cursor/rules/ for component layout and navigation standards
• Component roadmap: Reference docs/COMPONENT_MAP.md for build priority and status
• Code quality: Follow eslint.config.js, .prettierrc, and tsconfig.*.json standards
• Documentation: Maintain consistency with README.md, CONTRIBUTING.md standards
• Legal compliance: Reference licenses/ directory and LICENSE for OGL/attribution rules

## 12. Critical Anti-Patterns (NEVER DO THESE)
• ❌ Creating `src/components/ui/use-*.ts` files (causes circular imports)
• ❌ Claiming to add imports without updating destructuring assignments
• ❌ Using undefined variables (breaks TypeScript compilation)
• ❌ Modifying store interfaces without updating consuming components
• ❌ Saying changes are complete when they're not actually implemented
• ❌ Importing hooks from UI components instead of hooks directory
• ❌ Breaking existing functionality while adding new features
• ❌ Deploying code that doesn't compile or has TypeScript errors

## 13. Current Project Status
• ✅ Page components properly extracted to src/pages/
• ✅ Journal system enhanced with JournalEntryCard CRUD functionality
• ✅ TypeScript compilation errors resolved
• ✅ ESLint configuration updated with browser globals
• ✅ Prettier formatting applied consistently
• ✅ Component prop interfaces properly typed
• ✅ Zustand store with hydration safety implemented
• 🚧 Supabase journal persistence (planned)
• 🚧 AI integrations (OpenAI, Leonardo.AI, ElevenLabs) (planned)

# ────────────────────────────────────────────────────────────
#  End of .bolt/prompt
# ────────────────────────────────────────────────────────────