# ────────────────────────────────────────────────────────────
#  Luminari's Quest · Persistent Build Rules for Bolt.new
# ────────────────────────────────────────────────────────────
#  Purpose
#  • Prevent "run-away generator" behaviour by scoping every build.
#  • Encode project-wide tech stack, style guide, and contest limits.
#  • Loaded automatically; do NOT repeat these rules in individual prompts.
# ────────────────────────────────────────────────────────────

## 0. Stack Snapshot  (reference – do not override)
TECH_FRONTEND          = React 18 + TypeScript 5 (Vite)
STYLING                = Tailwind CSS (JIT)  +  Shadcn/UI components
BACKEND_API            = Supabase JS client (only calls, no schema edits)
AI_SERVICES            = OpenAI (narrative) · Leonardo.AI (visuals) · ElevenLabs (voice)
DEPLOY_TARGET          = Netlify
FILE_STRUCTURE_ROOT    = src/
  • src/pages/         = route entry points
  • src/components/    = atomic UI pieces
  • src/hooks/         = reusable logic
  • src/services/      = API wrappers & helpers
ENV_PLACEHOLDERS_FILE  = .env.example

## 1. Scope & Safety Rules  (highest priority)
1.  ONLY edit file(s) explicitly *Targeted* in the current Build run.
2.  NEVER create, rename, or delete files, routes, tests, styles, or data models
    unless the prompt says "add ___".
3.  If the prompt violates Rule 1 or 2, raise a warning comment instead of acting.
4.  Keep every build **idempotent**—running twice must leave code unchanged.
5.  Do not reference or import libraries outside TECH_FRONTEND & STYLING stack.
6.  Never modify configuration files (vite.config.ts, tsconfig.*.json, etc.) unless prompted.
7.  Never modify environment files (.env, .env.*) or documentation unless explicitly requested.

## 2. Component Design Principles (Atomic Design)
• Follow atomic design principles for all components:
  - Atoms: Basic UI elements (Button, Input, Card)  
  - Molecules: Composite components (AuthForm, NavItem)  
  - Organisms: Complex components (Layout, Sidebar)
• All components must:
  - Use TypeScript with strict mode; no `any` unless explicitly allowed
  - Be under 250 lines (split into subcomponents if needed)
  - Use Tailwind CSS for styling only—no separate CSS/Sass files
  - Use Shadcn/UI components as base: `import { Button } from "@/components/ui/button"`
  - Use Lucide icons for navigation/actions
  - Include proper accessibility attributes (ARIA, keyboard nav, screen reader support)
• File naming:
  - React components: PascalCase (e.g., AuthForm.tsx)
  - Utilities/hooks: camelCase (e.g., useAuth.ts)
  - Test files: *.test.tsx

## 3. Project Roadmap & Task Tracking
• Follow component priority in docs/COMPONENT_MAP.md:
  1. Project Scaffold → 2. Core Layout Shell → 3. Auth Module → 4. Supabase Client
  5. Game State Store → 6. Character Creation → 7. Narrative Engine → 8. AI Integrations
• Never build features out of order unless explicitly approved.
• Track current focus through GitHub Issues/PRs and docs/COMPONENT_MAP.md.

## 4. Prompt Format Expectations
• The incoming prompt must follow the SPECS-E pattern  
  (State · Platform · Examples · Constraints · Success).
• If any SPECS-E section is missing or ambiguous, ask for clarification in *Discussion*
  mode—do NOT skip straight to code.

## 5. Coding Conventions
• TypeScript strict mode; no `any` unless explicitly allowed.  
• Tailwind classes only—no separate CSS/Sass files.  
• Use Shadcn/UI imports: `import { Button } from "@/components/ui/button"` etc.  
• Keep imports sorted alphabetically; prefer absolute imports via `@/` alias if configured.  
• Provide TODO comments for future logic; avoid filler lorem ipsum.
• Add JSDoc comments for all components and functions.
• Write tests for new features using Vitest.

## 6. Environment & API Requirements
• Required environment variables (reference .env.example):
  - VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY
  - VITE_OPENAI_API_KEY, VITE_LEONARDO_API_KEY, VITE_ELEVENLABS_API_KEY
• Read runtime secrets exclusively from `process.env.*`; never hard-code keys.  
• If a required env var is missing, leave a TODO and reference `.env.example`.  
• Do not alter `.env.example` unless the prompt specifies new placeholders.
• Use proper error handling for missing env vars.

## 7. Narrative & IP Constraints
• Respect established lore: protagonist **Luminari** journeys through **Lumina**,
  an RPG adventure aimed at healing trauma from parental loss & homelessness.  
• Game content must follow OGL/ORC licensing; never use third-party RPG IP or "Product Identity".
• OGL/Pathfinder mechanics are allowed, but **never name "Pathfinder" in code or text**.  
• All generated text, variables, and comments must remain PG-13.
• Maintain "Built with Bolt.new" attribution in Footer.
• Update licenses/third-party.md when adding new dependencies.

## 8. Quality Gates & Error Handling
• Code **must compile** (`npm run build`) and **lint clean** (`npm run lint`).  
• No ESLint warnings are acceptable unless waived in the prompt.  
• CI workflow lives in `.github/workflows/ci.yml`; do not edit it unless asked.
• Use ErrorBoundary for React errors; implement proper loading states.
• Handle API errors gracefully; validate environment variables.
• Test in production mode before deploying; monitor for blank screens.

## 9. Documentation & Commit Standards
• Keep core documentation files unchanged: README.md, CONTRIBUTING.md, licenses/third-party.md, docs/COMPONENT_MAP.md.
• Write conventional commit messages: feat/fix/docs/style/refactor/test/chore.
• Stage only files related to current task; keep commits atomic and focused.

## 10. Output Etiquette
• Respond with **code blocks only** when generating files. No extra commentary.  
• Prepend each generated file with `// GENERATED BY BOLT.NEW – DO NOT EDIT MANUALLY`
  unless the prompt overrides.  
• If an instruction conflicts with any rule above, defer to **Scope & Safety Rules** §1.

## 11. Cross-Platform Integration
• Cursor IDE rules: See .cursor/rules/ for component layout and navigation standards
• Component roadmap: Reference docs/COMPONENT_MAP.md for build priority and status
• Code quality: Follow eslint.config.js, .prettierrc, and tsconfig.*.json standards
• Documentation: Maintain consistency with README.md, CONTRIBUTING.md standards
• Legal compliance: Reference licenses/ directory and LICENSE for OGL/attribution rules

# ────────────────────────────────────────────────────────────
#  End of .bolt/prompt
# ────────────────────────────────────────────────────────────