// GENERATED BY BOLT.NEW â€“ DO NOT EDIT MANUALLY

import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import type { JournalEntry } from '@/components/JournalModal';

export interface Milestone {
  id: string;
  level: number;
  label: string;
  achieved: boolean;
  achievedAt?: Date;
}

export interface CompletedScene {
  id: string;
  sceneId: string;
  type: 'social' | 'skill' | 'combat' | 'journal' | 'exploration';
  title: string;
  success: boolean;
  roll: number;
  dc: number;
  trustChange: number;
  completedAt: Date;
}

export interface GameState {
  guardianTrust: number;
  playerLevel: number;
  currentScene: number;
  journalEntries: JournalEntry[];
  milestones: Milestone[];
  sceneHistory: CompletedScene[];
  setGuardianTrust: (trust: number) => void;
  addJournalEntry: (entry: JournalEntry) => void;
  completeScene: (scene: CompletedScene) => void;
  saveToSupabase: () => Promise<void>;
  loadFromSupabase: () => Promise<void>;
  resetGame: () => void;
  updateMilestone: (level: number) => void;
}

const initialMilestones: Milestone[] = [
  { id: 'milestone-25', level: 25, label: 'Inner Strength', achieved: false },
  { id: 'milestone-50', level: 50, label: 'Finding Balance', achieved: false },
  { id: 'milestone-75', level: 75, label: 'Deep Connection', achieved: false },
];

export const useGameStore = create<GameState>()(
  persist(
    (set, get) => ({
      // Initial state
      guardianTrust: 50,
      playerLevel: 1,
      currentScene: 0,
      journalEntries: [],
      milestones: initialMilestones,
      sceneHistory: [],

      // Actions
      setGuardianTrust: (trust: number) => {
        const clampedTrust = Math.max(0, Math.min(100, trust));
        set({ guardianTrust: clampedTrust });
        
        // Check for milestone achievements
        get().updateMilestone(clampedTrust);
      },

      addJournalEntry: (entry: JournalEntry) => {
        set((state) => ({
          journalEntries: [...state.journalEntries, entry],
        }));
      },

      completeScene: (scene: CompletedScene) => {
        set((state) => ({
          sceneHistory: [...state.sceneHistory, scene],
          currentScene: state.currentScene + 1,
        }));
      },

      updateMilestone: (trustLevel: number) => {
        set((state) => ({
          milestones: state.milestones.map((milestone) => {
            if (trustLevel >= milestone.level && !milestone.achieved) {
              return {
                ...milestone,
                achieved: true,
                achievedAt: new Date(),
              };
            }
            return milestone;
          }),
        }));
      },

      resetGame: () => {
        set({
          guardianTrust: 50,
          playerLevel: 1,
          currentScene: 0,
          journalEntries: [],
          milestones: initialMilestones,
          sceneHistory: [],
        });
      },

      // Placeholder implementations for Supabase integration
      saveToSupabase: async () => {
        // TODO: Implement Supabase save functionality
        // This will save the current game state to the user's profile
        console.log('Saving game state to Supabase...', get());
        return Promise.resolve();
      },

      loadFromSupabase: async () => {
        // TODO: Implement Supabase load functionality
        // This will load the user's saved game state from their profile
        console.log('Loading game state from Supabase...');
        return Promise.resolve();
      },
    }),
    {
      name: 'luminari-game-state',
      partialize: (state) => ({
        guardianTrust: state.guardianTrust,
        playerLevel: state.playerLevel,
        currentScene: state.currentScene,
        journalEntries: state.journalEntries,
        milestones: state.milestones,
        sceneHistory: state.sceneHistory,
      }),
    }
  )
);