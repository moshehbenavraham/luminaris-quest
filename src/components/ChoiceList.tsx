// GENERATED BY BOLT.NEW â€“ DO NOT EDIT MANUALLY

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  getScene,
  isLastScene,
  getSceneProgress,
  rollDice,
  type DiceResult,
} from '@/engine/scene-engine';
import { DiceRollOverlay } from './DiceRollOverlay';
import { useGameStore } from '@/store/game-store';
import { Sword, Users, Wrench, BookOpen, Map } from 'lucide-react';

interface ChoiceListProps {
  guardianTrust: number;
  setGuardianTrust: (trust: number) => void;
  setGuardianMessage: (message: string) => void;
  onSceneComplete?: (sceneId: string, success: boolean) => void;
  onLearningMoment?: () => void;
}

export function ChoiceList({
  guardianTrust,
  setGuardianTrust,
  setGuardianMessage,
  onSceneComplete,
  onLearningMoment,
}: ChoiceListProps) {
  const { completeScene, resetGame, currentSceneIndex, advanceScene } = useGameStore();
  const [showDiceRoll, setShowDiceRoll] = useState(false);
  const [diceResult, setDiceResult] = useState<DiceResult | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  const currentScene = getScene(currentSceneIndex);
  const progress = getSceneProgress(currentSceneIndex);

  const getSceneIcon = (type: string) => {
    switch (type) {
      case 'social':
        return <Users className="h-4 w-4" />;
      case 'skill':
        return <Wrench className="h-4 w-4" />;
      case 'combat':
        return <Sword className="h-4 w-4" />;
      case 'journal':
        return <BookOpen className="h-4 w-4" />;
      case 'exploration':
        return <Map className="h-4 w-4" />;
      default:
        return <Map className="h-4 w-4" />;
    }
  };

  const getSceneColor = (type: string) => {
    switch (type) {
      case 'social':
        return 'bg-blue-100 text-blue-800';
      case 'skill':
        return 'bg-green-100 text-green-800';
      case 'combat':
        return 'bg-red-100 text-red-800';
      case 'journal':
        return 'bg-purple-100 text-purple-800';
      case 'exploration':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const handleChoice = () => {
    if (isProcessing) return;

    setIsProcessing(true);
    const result = rollDice(currentScene.dc);
    setDiceResult(result);
    setShowDiceRoll(true);
  };

  const handleDiceRollClose = () => {
    if (!diceResult) return;

    setShowDiceRoll(false);

    // Update guardian trust and message based on result
    const scene = getScene(currentSceneIndex);
    const trustChange = diceResult.success ? 5 : -5;
    const newTrust = Math.min(100, Math.max(0, guardianTrust + trustChange));

    setGuardianTrust(newTrust);

    if (diceResult.success) {
      setGuardianMessage(scene.successText);
    } else {
      setGuardianMessage(scene.failureText);
    }

    // Record the completed scene
    completeScene({
      id: `scene-${Date.now()}`,
      sceneId: scene.id,
      type: scene.type,
      title: scene.title,
      success: diceResult.success,
      roll: diceResult.roll,
      dc: scene.dc,
      trustChange,
      completedAt: Date.now(),
    });

    if (!isLastScene(currentSceneIndex)) {
      advanceScene();
    }

    setIsProcessing(false);
    setDiceResult(null);

    if (onSceneComplete) {
      onSceneComplete(scene.id, diceResult.success);
    }

    if (onLearningMoment && !diceResult.success) {
      onLearningMoment();
    }
  };

  const handleNewJourney = () => {
    resetGame();
    setGuardianMessage(
      'I am your guardian spirit, here to guide and support you on this journey. Your choices shape our bond and your path forward.',
    );
  };

  if (isLastScene(currentSceneIndex) && !showDiceRoll) {
    return (
      <Card className="mx-auto w-full max-w-2xl">
        <CardHeader>
          <CardTitle>Journey Complete</CardTitle>
          <CardDescription>
            You have completed this chapter of your adventure. Your guardian spirit has learned much
            about your choices and growth through {progress.total} meaningful encounters.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="rounded-lg bg-muted p-4 text-center">
            <p className="mb-2 text-sm text-muted-foreground">Final Trust Level</p>
            <p className="text-2xl font-bold">{guardianTrust}/100</p>
          </div>
          <Button onClick={handleNewJourney} className="w-full">
            Begin New Journey
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <>
      <Card className="mx-auto w-full max-w-2xl">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Badge variant="outline" className={getSceneColor(currentScene.type)}>
                {getSceneIcon(currentScene.type)}
                {currentScene.type.charAt(0).toUpperCase() + currentScene.type.slice(1)}
              </Badge>
              <span className="text-sm text-muted-foreground">
                {progress.current} of {progress.total}
              </span>
            </div>
          </div>
          <CardTitle className="mt-2">{currentScene.title}</CardTitle>
          <CardDescription>
            Your guardian spirit watches as you face this {currentScene.type} challenge.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="prose prose-sm max-w-none">
            <p className="leading-relaxed text-foreground">{currentScene.text}</p>
          </div>

          <div className="space-y-4">
            <div className="space-y-1 border-b border-t border-muted py-2 text-center">
              <p className="text-sm font-medium text-muted-foreground">
                Difficulty: {currentScene.dc}
              </p>
              <p className="text-xs text-muted-foreground">Your choice will be tested by fate</p>
            </div>

            <div className="space-y-3">
              <Button
                onClick={handleChoice}
                disabled={isProcessing}
                className="h-auto w-full justify-start p-4 text-left"
                variant="outline"
              >
                <div className="w-full">
                  <div className="text-base font-medium">{currentScene.choices.bold}</div>
                </div>
              </Button>

              <Button
                onClick={handleChoice}
                disabled={isProcessing}
                className="h-auto w-full justify-start p-4 text-left"
                variant="outline"
              >
                <div className="w-full">
                  <div className="text-base font-medium">{currentScene.choices.cautious}</div>
                </div>
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {showDiceRoll && diceResult && (
        <DiceRollOverlay result={diceResult} onClose={handleDiceRollClose} />
      )}
    </>
  );
}
