# Luminari's Quest - Project Guidelines

## 🎮 Overview
**Luminari's Quest** is a therapeutic AI-powered RPG for young adults (18-25) processing trauma from parental loss and homelessness. It combines fantasy storytelling with evidence-based therapeutic techniques.

**Important**: Supplemental tool, NOT a replacement for professional mental health care.

## 🛠️ Tech Stack
### Core
- **Frontend**: React 18 + TypeScript + Vite
- **Styling**: Tailwind CSS + Shadcn/UI
- **State**: Zustand with persistence
- **Backend**: Supabase (auth & database)
- **Deployment**: Netlify
- **Dev Tools**: Bolt.new (primary), OpenAI Project, Cursor, Windsurf

### Planned AI Services
- OpenAI (narrative), Leonardo.AI (visuals), ElevenLabs (voice), Suno (music)

## 📁 Project Structure
```
src/
├── components/     # Feature components
│   ├── ui/        # Shadcn/UI base
│   ├── layout/    # Navbar, Sidebar, Footer
│   └── auth/      # Authentication
├── pages/         # Routes (Home, Adventure, Progress, Profile, Legal)
├── hooks/         # Custom React hooks
├── lib/           # Utilities
├── store/         # Zustand state
├── engine/        # Game logic
└── integrations/  # External services
```

## ✨ Core Features
- **Guardian Trust System**: Bond tracking (0-100)
- **Therapeutic Journaling**: Full CRUD with prompts
- **Scene-based Gameplay**: Social, skill, combat, journal, exploration
- **Milestones**: Progress tracking with rewards
- **Responsive Design**: Desktop, tablet, mobile

## 💻 Development Standards
### Code Quality
- TypeScript strict mode required
- Atomic design principles
- Components under 500 lines
- WCAG accessibility compliance
- Vitest testing

### Styling
- Tailwind CSS only (no separate CSS files)
- Shadcn/UI components (Radix UI primitives)

### Scripts
- `npm run dev` - Development server
- `npm run build` - Production build
- `npm run lint` - ESLint
- `npm run format` - Prettier
- `npm run test` - Vitest

## 🔐 Environment Variables
```env
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your-anon-key
VITE_OPENAI_API_KEY=your-openai-api-key  # Required
# Optional: VITE_LEONARDO_API_KEY, VITE_ELEVENLABS_API_KEY
```

## 🏗️ Architecture
### Components
- **Page Extraction**: Dedicated page files from App.tsx
- **Journal System**: Enhanced CRUD with JournalEntryCard
- **TypeScript**: All errors resolved, proper typing
- **Code Quality**: ESLint configured, Prettier formatting

### State Management (Zustand)
- Persistence with hydration safety
- Separate stores by domain
- SSR compatibility

### Component Patterns
```typescript
interface ComponentProps {
  data: DataType;
  onAction: (value: string) => void;
  className?: string;
  disabled?: boolean;
}
```

## 🗄️ Database Schema
### game_states Table
```sql
user_id         UUID PRIMARY KEY
guardian_trust  INTEGER
player_level    INTEGER
current_scene_index INTEGER
milestones      JSONB
scene_history   JSONB
updated_at      TIMESTAMP
```

### journal_entries Table
```sql
id          TEXT PRIMARY KEY
user_id     UUID
type        TEXT ('milestone'|'learning')
trust_level INTEGER
content     TEXT
title       TEXT
scene_id    TEXT
tags        JSONB
is_edited   BOOLEAN
created_at  TIMESTAMP
edited_at   TIMESTAMP
```

### RLS Policies
Both tables require Row Level Security enabling users to only access their own data.

## 🐛 Critical Fixes
### JournalModal Infinite Loop (RESOLVED)
- **Issue**: useEffect missing dependencies causing crashes
- **Fix**: Added `savedForThisOpen` state guard
- **Lesson**: Always include all useEffect dependencies

### Database 404 Errors (RESOLVED)
- **Issue**: Missing database tables
- **Fix**: Migration files in `docs/migrations/`

## 🚀 Production Deployment
### Database Migration
1. Execute migration SQL in Supabase
2. Configure environment variables in Bolt.new
3. Deploy via Bolt.new deployment process

### Post-Deploy Verification
- [ ] Authentication (signup/signin/signout)
- [ ] Game functionality (choices, trust updates)
- [ ] Journal system (CRUD operations)
- [ ] Data persistence
- [ ] Health monitoring

## 🧪 Testing Standards
### Automated
- Database operations ✅
- State management ✅
- UI interactions (manual required)

### Manual Testing Required
1. Game state persistence
2. Journal CRUD operations
3. Milestone triggers (25, 50, 75 trust)
4. Error handling
5. React Error #185 monitoring
6. Cross-browser compatibility

## 🎨 Design Standards
### Theme Colors
```typescript
primary: '#865DFF'    // Brand purple
accent: '#00FFD0'     // Therapeutic turquoise
neutral: {
  50: '#F7F8FA',     // Light backgrounds
  800: '#272940'     // Dark text
}
```

### Typography
- Heading: Roboto
- Body: Arial

## 📋 Component Status
| Component | Status | Notes |
|-----------|--------|-------|
| Project Scaffold | ✅ | React/TS/Vite/Tailwind |
| Layout Shell | ✅ | Navbar/Sidebar/Footer |
| Page Architecture | ✅ | Extracted from App.tsx |
| Auth Module | ✅ | Supabase integration |
| Game State | ✅ | Zustand with persistence |
| Journal System | ✅ | Full CRUD operations |
| Guardian Trust | ✅ | Core mechanic complete |
| Scene Engine | ✅ | Therapeutic gameplay |

### Planned Features
- Supabase journal sync (High)
- AI narrative generation (Medium)
- Leonardo images (Medium)
- ElevenLabs voice (Low)
- Music player (Low)

## 🤖 AI Platform Integration
### Bolt.new Requirements
- Follow atomic design patterns
- TypeScript strict mode
- No circular imports
- Verify all imports exist
- Keep builds compilable

### Critical Anti-Patterns
- ❌ Creating `src/components/ui/use-*.ts`
- ❌ Undefined variables
- ❌ Modifying stores without updating consumers
- ❌ Breaking existing functionality

## ⚖️ Legal Framework
### Licensing
- **Code**: MIT License
- **Game Content**: OGL/ORC License
- **Dependencies**: Various (see licenses/third-party.md)

### Requirements
- No third-party RPG IP
- PG-13 content rating
- "Built with Bolt.new" attribution
- OGL attribution for game mechanics

## 👥 Community Standards
- Code of Conduct based on Contributor Covenant v2.1
- Contact: MAX@AIWITHAPEX.COM
- Conventional commit format required

## 📊 Environment Architecture
### Current Status
- Local: ✅ Operational
- Development: ⏳ Not configured
- Staging: ⏳ Not configured
- Production: ✅ Ready (migration guide available)

### Deployment Strategy
Local → Development → Staging → Production

## 🔧 Configuration
### Dependencies
- React 18.2.0
- TypeScript 5.3.3
- Vite 6.3.5
- Zustand 5.0.2
- Supabase 2.39.7
- OpenAI 4.28.0

### Build Settings
```typescript
// vite.config.ts
server: { port: 8080 }
build: { sourcemap: true }
```

### TypeScript
- Strict mode enabled
- Path alias: `@/*` → `src/*`
- No unused variables

## 📈 Performance
- Bundle size under 1MB
- Code splitting for large features
- Lazy loading for non-critical components
- Health monitoring with 45-second intervals

## 🎯 Current Priorities
1. Supabase journal persistence
2. OpenAI narrative integration
3. Enhanced journal UX
4. Performance optimization
5. Test coverage expansion

**NOT accepting contributions for**: Core narrative, major architecture changes, new AI services, therapeutic content.

---
*Project maintained by AIwithApex.com | Built with Bolt.new*